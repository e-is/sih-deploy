###################################################################
#
#  Adagio-Extractor :: SFA Configuration file
#
#  Copyright SFA/EIS 2016
#
###################################################################

extractor.version=2.1.0

# Default local used by server
extractor.locale=en_US

# Application name (on default theme: visible on footer)
extractor.appName=SIH SFA Extractor

# UI Theme:
# - '' (empty): default theme
# - 'compact' : hide left menu
# - 'mystyle': Any CSS file existing inside the WAR (e.g. adagio-extractor.war!mystyle.css')
#extractor.ui.themes=compact

# --------------------------------------------------------
# Database configuration
# --------------------------------------------------------

extractor.persistence.datasource.type=jndi
extractor.persistence.jndi-name=java:comp/env/jdbc/adagio-extractor-ds
extractor.persistence.jdbc.dbms=oracle
extractor.persistence.user-admin.type=adagio
extractor.persistence.user-admin.jdbc.type=none

extractor.persistence.hibernate.dialect=org.hibernate.dialect.Oracle10gDialect
#extractor.persistence.hibernate.showSql=true

extractor.persistence.jdbc.username=@jdbcUsername@
extractor.persistence.jdbc.password=@jdbcPassword@
#extractor.persistence.jdbc.catalog=
#extractor.persistence.jdbc.schema=@jdbcUsername@
extractor.persistence.jdbc.driver=oracle.jdbc.OracleDriver
extractor.persistence.jdbc.url=@jdbcUrl@

# Max cost for SQL queries
# If a query exceed this max cost, the extraction will wait the moderator confirmation
# Comment out or put '0' to disable this features
#extractor.explainPlan.maxCost=0

# Tablespace where to stored result table (optional)
#  only if dbms 'oracle'
extractor.persistence.resultTable.tablespace=SIH2_ADAGIO_EXTRACTOR_RES

# --------------------------------------------------------
# Database to extract config (source DB)
# --------------------------------------------------------

# Pattern to limit table to extract
# By default = ${extractor.persistence.jdbc.schema}
extractor.sourceDb.schemaPattern=@jdbcSourceSchema@

# By default = ${extractor.persistence.jdbc.schema}
extractor.sourceDb.synonyms.schemaPattern=@jdbcSourceSchema@

# By default: all tables (pattern with '%' allowed)
#extractor.sourceDb.table.includes=TABLE1,TABLE2,PREFIX_%

# Tables to excludes (pattern with '%' allowed)
# By SIH-Adagio technical tables are excludes: DUAL_%,BIN%,MDR%,PLG_%,SIH_%,TMP_%,TEMP_%
#extractor.sourceDb.table.excludes=

# Tables to always excludes (even if included by other include pattern)
#extractor.sourceDb.table.excludeAlways=

# Path of bundle used for table/column translation (classpath bundle)
# By default: fr/ifremer/adagio/extractor/db/nls/adagio
extractor.sourceDb.nls.basename=sc/sfa/sih/adagio

# Enable PMFM features (need a SIH-Adagio or QuadrigeÂ² database schema)
# By default: false
extractor.sourceDb.pmfm.enable=true

# [if PMFM enable] Set the algorithm method for pmfm query generation : nestedSelect, decodeSelect
# By default : nestedSelect
# but decodeSelect is better is support (e.g. Oracle)
extractor.sourceDb.pmfm.queryMethod=decodeSelect

# [if PMFM enable] name of PMFM foreign key
# By default : PMFM_FK
#extractor.sourceDb.pmfm.fkColumn=PMFM_ID

# [if PMFM enable] name of PROGRAM foreign key
# By default : PROGRAM_FK
#extractor.sourceDb.program.fkColumn=PROG_CD

# [if PMFM enable] name of recorder department foreign key
# By default : RECORDER_DEPARTMENT_FK
#extractor.sourceDb.recorderDepartment.fkColumn=REC_DEP_ID

# --------------------------------------------------------
# Database constants
# --------------------------------------------------------

extractor.constants.locationClassification.territorial.id=2
extractor.constants.locationClassification.sea.id=1
extractor.constants.locationLevel.territorial.id=6
extractor.constants.locationLevel.sea.id=7

# --------------------------------------------------------
# Directories and download URL configuration
# --------------------------------------------------------

# Base directory
extractor.basedir=@homeDir@/.adagio-extractor

# Data directory (where exported file are stored)
extractor.data.directory=${extractor.basedir}/data

# Web extractor application URL, to used for download
extractor.ui.baseUrl=@serverUrl@/adagio-extractor

# download base url : uncomment to used Apache (with .htacess security) 
#extractor.ui.download.baseUrl=<URL_TO_APACHE_EXPORT_DIRECTORY>

# --------------------------------------------------------
# Authentification & Security
# --------------------------------------------------------

# UI security type : 'cas', 'database', 'activeDirectory' or 'ldap'
extractor.ui.security.type=activeDirectory

# If security type = 'activeDirectory'
extractor.ui.security.activeDirectory.domain=sfa.sc
extractor.ui.security.activeDirectory.url=ldap://sfadc.sfa.sc

# Path to template file .htaccess -> for user extraction
# -> could be a path, or a classpath resource (if prefix by classpath: )
#extractor.ui.security.htaccess.path=<PATH_TO_HTACCESS_TEMPLATE>
#extractor.ui.security.htaccess.path=classpath:<CLASSPATH_FILE>

# Path to template file .htaccess -> for dashboard extraction
#extractor.ui.security.dashboard.htaccess.path=<PATH_TO_HTACCESS_TEMPLATE>
#extractor.ui.security.dashboard.htaccess.path=classpath:<CLASSPATH_FILE>
#extractor.ui.security.dashboard.htaccess.path=conf/htaccess.template

# --------------------------------------------------------
# Email configuration
# --------------------------------------------------------

# Email to use when sending email (if extraction failed, or pending confirmation, ...)
extractor.admin.email=admsih@sfa.sc
# Email when moderation are need (e.g. when query cost is too high)
extractor.moderator.email=jlucas@sfa.sc

# Prefix for email
extractor.mail.subject.prefix=[SIH-SFA]

# SMTP server
extractor.mail.smtp.host=@smtpHost@
extractor.mail.smtp.port=@smtpPort@
#extractor.mail.smtp.username=@smtpUsername@
#extractor.mail.smtp.password=@smtpPassword@

# --------------------------------------------------------
# Scheduling configuration
# --------------------------------------------------------

# Scheduling type (optional)
#  - 'disable': force Adagio-Extractor :: Batch to run only once then stop ('disable' value has no effect on Adagio-Extractor :: WebApp)  
#  - 'quartz': force Adagio-Extractor :: WebApp to run a scheduler ('quartz' value has no effect on Adagio-Extractor :: Batch)
#  - If comment out: default configuration will be use - RECOMMENDED
extractor.scheduling.type=disable

# Cron expression.
# Examples:
#  - every 5 minutes : 0 0/5 * 1/1 * ? *
#  - every 30 seconds: 0/30 * * * * ?

# TODO: change this
#extractor.scheduling.quartz.cronExpression=0/30 * * * * ?
extractor.scheduling.quartz.cronExpression=0/5 * * * * ?
