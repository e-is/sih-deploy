<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>pro.eis.sih</groupId>
  <artifactId>sih-deploy</artifactId>
  <version>1.0</version>
  <packaging>pom</packaging>
  <name>Deployment of Halieutic Information Systems</name>

  <url>http://www.ifremer.fr/sih</url>
  <inceptionYear>2016</inceptionYear>

  <licenses>
    <license>
      <name>Affero General Public License (AGPL)</name>
      <url>http://www.gnu.org/licenses/agpl.txt</url>
      <distribution>repo</distribution>
    </license>
  </licenses>

  <developers>
    <developer>
      <id>bl05b3e</id>
      <name>Benoit Lavenier</name>
      <email>benoit.lavenier@e-is.pro</email>
      <organization>EIS</organization>
      <organizationUrl>http://www.e-is.pro</organizationUrl>
    </developer>
    <developer>
      <id>lp1ee9d</id>
      <name>Ludovic Pecquot</name>
      <email>ludovic.pecquot@e-is.pro</email>
      <organization>EIS</organization>
      <organizationUrl>http://www.e-is.pro</organizationUrl>
    </developer>
  </developers>

  <scm>
    <url>https://github.com/E-IS/sih-deploy</url>
    <connection>
      scm:git:https://github.com/E-IS/sih-deploy
    </connection>
    <developerConnection>
      scm:svn:https://github.com/E-IS/sih-deploy
    </developerConnection>
  </scm>

  <distributionManagement>
    <repository>
      <uniqueVersion>false</uniqueVersion>
      <id>${distribution.repository.id}</id>
      <url>${distribution.repository.url}</url>
    </repository>
    <snapshotRepository>
      <id>${distribution.snapshotRepository.id}</id>
      <url>${distribution.snapshotRepository.url}</url>
    </snapshotRepository>
    <site>
      <id>${distribution.site.id}</id>
      <url>${distribution.site.repository}/${distribution.site.projectId}</url>
    </site>
  </distributionManagement>

  <issueManagement>
    <system>Github</system>
    <url>
      https://github.com/E-IS/sih-deploy/issues
    </url>
  </issueManagement>

  <properties>
    <!-- deploy environment -->
    <env>none</env>

    <home.dir>${user.home}</home.dir>

    <!-- server version -->
<!--    TODO upgrade tomcat to 8.5.51 -->
<!--    <tomcat.version>8.5.51</tomcat.version>-->
    <tomcat.version>8.0.39</tomcat.version>
    <tomcat.port>8080</tomcat.port>
    <tomcat.host>localhost</tomcat.host>
    <tomcat.url>http://${tomcat.host}:${tomcat.port}</tomcat.url>
    <jboss.version>4.0.4.GA</jboss.version>

    <!-- webapps version -->
    <adagio-admin.version>2.6.7</adagio-admin.version>
    <adagio.version>4.0.4</adagio.version>
    <adagio-extractor.version>2.1.0</adagio-extractor.version>

    <!-- clients version -->
    <allegro-obsdeb.version>1.8.2</allegro-obsdeb.version>
    <allegro-obsdeb.launcher.version>1.8.2</allegro-obsdeb.launcher.version>
    <allegro-obsdeb.jre.version>1.8.77</allegro-obsdeb.jre.version>
    <allegro-obsdeb.classifier>full-windows-i586</allegro-obsdeb.classifier>
    <allegro-obsdeb.export-plugin.version>0.9</allegro-obsdeb.export-plugin.version>
    <!--<allegro-obsdeb.distributionUrl>http://www.ifremer.fr/maven/repository</allegro-obsdeb.distributionUrl>-->

    <allegro-q2.version>2.3.5e</allegro-q2.version>
    <allegro-remote-q2.classifier>activeDirectory</allegro-remote-q2.classifier>

    <allegro.version>3.7.2</allegro.version>
    <allegro-remote.classifier>activeDirectory</allegro-remote.classifier>

    <!-- lib versions -->
    <!--<jdbc.ojdbc7.version>12.1.0.2.0</jdbc.ojdbc7.version>-->
    <jdbc.ojdbc8.version>12.2.0.1</jdbc.ojdbc8.version>
    <jdbc.hsqldb.version>2.3.2</jdbc.hsqldb.version>
    <log4j.version>1.2.17</log4j.version>
    <slf4j.version>1.7.8</slf4j.version>

    <!--<cas.version>4.1.4</cas.version>-->
    <!--<cas.classifier>ldap</cas.classifier>-->

    <!-- those properties needs to be passed as arguments -->
    <!--<tomcat.skip>true</tomcat.skip>-->
    <!--<jboss.skip>true</jboss.skip>-->
    <!--<client.skip>false</client.skip>-->

    <clients.dir>${project.build.directory}/clients</clients.dir>
    <tomcat.dir>${project.build.directory}/apache-tomcat-${tomcat.version}</tomcat.dir>
    <webapps.dir>${tomcat.dir}/webapps</webapps.dir>
    <site.dir>${webapps.dir}/ROOT</site.dir>
    <jboss.dir>${project.build.directory}/jboss-${jboss.version}</jboss.dir>
    <jboss.deploy.dir>${jboss.dir}/server/default/deploy</jboss.deploy.dir>

  </properties>

  <!-- Repositories needed to find the dependencies -->
  <repositories>
    <repository>
      <id>adagio-public-group</id>
      <url>http://nexus.e-is.pro/nexus/content/groups/sih-adagio/</url>
      <releases>
        <enabled>true</enabled>
        <checksumPolicy>fail</checksumPolicy>
      </releases>
    </repository>
    <repository>
      <id>allegro-obsdeb-public-group</id>
      <url>http://nexus.e-is.pro/nexus/content/groups/sih-allegro-obsdeb</url>
      <releases>
        <enabled>true</enabled>
        <checksumPolicy>fail</checksumPolicy>
      </releases>
    </repository>
    <repository>
      <id>ifremer-public-group</id>
      <url>http://www.ifremer.fr/maven/repository</url>
      <releases>
        <enabled>true</enabled>
        <checksumPolicy>fail</checksumPolicy>
      </releases>
    </repository>
  </repositories>

  <dependencies>
    <!-- Adagio-Admin -->
    <dependency>
      <groupId>fr.ifremer.adagio</groupId>
      <artifactId>adagio-admin</artifactId>
      <version>${adagio-admin.version}</version>
      <type>war</type>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <!-- Extractor -->
    <dependency>
      <groupId>fr.ifremer.adagio</groupId>
      <artifactId>adagio-extractor-ui</artifactId>
      <version>${adagio-extractor.version}</version>
      <type>war</type>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>fr.ifremer.adagio</groupId>
      <artifactId>adagio-extractor-ui</artifactId>
      <version>${adagio-extractor.version}</version>
      <classifier>standalone</classifier>
      <type>zip</type>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <!-- ObsDeb -->
    <dependency>
      <groupId>fr.ifremer.allegro.obsdeb</groupId>
      <artifactId>obsdeb-ui-swing</artifactId>
      <version>${allegro-obsdeb.version}</version>
      <classifier>${allegro-obsdeb.classifier}</classifier>
      <type>zip</type>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>fr.ifremer.allegro.obsdeb</groupId>
      <artifactId>obsdeb-ui-swing</artifactId>
      <version>${allegro-obsdeb.version}</version>
      <classifier>standalone</classifier>
      <type>zip</type>
    </dependency>
    <dependency>
      <groupId>fr.ifremer.allegro.obsdeb</groupId>
      <artifactId>obsdeb-ui-swing</artifactId>
      <version>${allegro-obsdeb.version}</version>
      <classifier>i18n</classifier>
      <type>zip</type>
    </dependency>
    <dependency>
      <groupId>fr.ifremer.allegro.obsdeb</groupId>
      <artifactId>obsdeb-ui-swing</artifactId>
      <version>${allegro-obsdeb.version}</version>
      <classifier>help</classifier>
      <type>zip</type>
    </dependency>
    <!-- launcher Obsdeb-->
    <dependency>
      <groupId>fr.ifremer.allegro.obsdeb</groupId>
      <artifactId>obsdeb-ui-swing-launcher</artifactId>
      <version>${allegro-obsdeb.launcher.version}</version>
      <classifier>bin</classifier>
      <type>zip</type>
    </dependency>

    <!-- Adagio Synchro Server -->
    <dependency>
      <groupId>fr.ifremer.adagio</groupId>
      <artifactId>adagio-synchro-server</artifactId>
      <version>${adagio.version}</version>
      <type>war</type>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <!-- Obsdeb JRE -->
    <dependency>
      <groupId>com.oracle</groupId>
      <artifactId>jre</artifactId>
      <version>${allegro-obsdeb.jre.version}</version>
      <type>zip</type>
      <classifier>windows-i586</classifier>
    </dependency>
    <dependency>
      <groupId>com.oracle</groupId>
      <artifactId>jre</artifactId>
      <version>${allegro-obsdeb.jre.version}</version>
      <type>zip</type>
      <classifier>windows-x64</classifier>
    </dependency>

    <!-- Adagio Core -->
    <dependency>
      <groupId>fr.ifremer.adagio</groupId>
      <artifactId>adagio-core</artifactId>
      <version>${adagio.version}</version>
      <classifier>standalone</classifier>
      <type>zip</type>
    </dependency>

    <!-- Allegro-q2 -->
    <dependency>
      <groupId>fr.ifremer.allegro</groupId>
      <artifactId>allegro-remote-q2</artifactId>
      <version>${allegro-q2.version}</version>
      <classifier>activeDirectory</classifier>
      <type>ear</type>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>fr.ifremer.allegro</groupId>
      <artifactId>allegro-q2</artifactId>
      <version>${allegro-q2.version}</version>
      <type>zip</type>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <!-- Allegro -->
    <dependency>
      <groupId>fr.ifremer.allegro</groupId>
      <artifactId>allegro-remote</artifactId>
      <classifier>noldap</classifier>
      <version>${allegro.version}</version>
      <type>ear</type>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>fr.ifremer.allegro</groupId>
      <artifactId>allegro</artifactId>
      <version>${allegro.version}</version>
      <type>zip</type>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>fr.ifremer.allegro.obsdeb</groupId>
      <artifactId>t0403_product_OBSDEB_export</artifactId>
      <version>${allegro-obsdeb.export-plugin.version}</version>
      <type>zip</type>
    </dependency>

    <!--<dependency>-->
      <!--<groupId>com.oracle</groupId>-->
      <!--<artifactId>ojdbc7</artifactId>-->
      <!--<version>${jdbc.ojdbc7.version}</version>-->
    <!--</dependency>-->
    <dependency>
      <groupId>com.oracle</groupId>
      <artifactId>ojdbc8</artifactId>
      <version>${jdbc.ojdbc8.version}</version>
    </dependency>
    <dependency>
      <groupId>org.hsqldb</groupId>
      <artifactId>hsqldb</artifactId>
      <version>${jdbc.hsqldb.version}</version>
    </dependency>
    <dependency>
      <groupId>log4j</groupId>
      <artifactId>log4j</artifactId>
      <version>${log4j.version}</version>
    </dependency>

    <!-- CAS server -->
    <!--<dependency>-->
    <!--<groupId>org.jasig.cas</groupId>-->
    <!--<artifactId>cas-server-webapp</artifactId>-->
    <!--<version>${cas.version}</version>-->
    <!--<classifier>${cas.classifier}</classifier>-->
    <!--<type>war</type>-->
    <!--<exclusions>-->
    <!--<exclusion>-->
    <!--<groupId>*</groupId>-->
    <!--<artifactId>*</artifactId>-->
    <!--</exclusion>-->
    <!--</exclusions>-->
    <!--</dependency>-->
  </dependencies>

  <pluginRepositories>
    <pluginRepository>
      <id>adagio-public-group</id>
      <url>http://nexus.e-is.pro/nexus/content/groups/sih-adagio</url>
      <snapshots>
        <enabled>true</enabled>
        <checksumPolicy>fail</checksumPolicy>
      </snapshots>
      <releases>
        <enabled>true</enabled>
        <checksumPolicy>fail</checksumPolicy>
      </releases>
    </pluginRepository>
  </pluginRepositories>

  <build>

    <plugins>
      <plugin>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>1.8</version>
        <dependencies>
          <dependency>
            <groupId>ant-contrib</groupId>
            <artifactId>ant-contrib</artifactId>
            <version>1.0b3</version>
            <exclusions>
              <exclusion>
                <groupId>ant</groupId>
                <artifactId>ant</artifactId>
              </exclusion>
            </exclusions>
          </dependency>
        </dependencies>
      </plugin>

      <plugin>
        <artifactId>maven-assembly-plugin</artifactId>
        <version>2.6</version>
      </plugin>

      <plugin>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>2.10</version>
        <configuration>
          <overWriteReleases>false</overWriteReleases>
          <overWriteSnapshots>true</overWriteSnapshots>
          <overWriteIfNewer>true</overWriteIfNewer>
          <silent>false</silent>
          <scope>provided</scope>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-release-plugin</artifactId>
        <version>2.5.3</version>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>1.4.1</version>
        <executions>
          <execution>
            <id>enforce-property</id>
            <phase>validate</phase>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <requireProperty>
                  <property>env</property>
                  <message>You must set a deploy environment (-Denv=...) !</message>
                  <regex>default|sfa|sfa-test|test</regex>
                  <regexMessage>The 'env' property must be one of {default,sfa,sfa-test}.</regexMessage>
                </requireProperty>
                <requireProperty>
                  <property>database.jdbc.url</property>
                  <message>You must set database.jdbc.url</message>
                </requireProperty>
                <requireProperty>
                  <property>database.jdbc.username</property>
                  <message>You must set database.jdbc.username</message>
                </requireProperty>
                <requireProperty>
                  <property>database.jdbc.password</property>
                  <message>You must set database.jdbc.password</message>
                </requireProperty>
                <requireProperty>
                  <property>database.jdbc.cryptPassword</property>
                  <message>You must set database.jdbc.cryptPassword</message>
                </requireProperty>
                <requireProperty>
                  <property>extractor.database.jdbc.url</property>
                  <message>You must set extractor.database.jdbc.url</message>
                </requireProperty>
                <requireProperty>
                  <property>extractor.database.jdbc.username</property>
                  <message>You must set extractor.database.jdbc.username</message>
                </requireProperty>
                <requireProperty>
                  <property>extractor.database.jdbc.password</property>
                  <message>You must set extractor.database.jdbc.password</message>
                </requireProperty>
                <requireProperty>
                  <property>ldap.manager.username</property>
                  <message>You must set ldap.manager.username</message>
                </requireProperty>
                <requireProperty>
                  <property>ldap.manager.password</property>
                  <message>You must set ldap.manager.password</message>
                </requireProperty>
              </rules>
              <fail>true</fail>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>

    <extensions>
      <!-- Enabling the use of scp/sftp:// with maven 3.0 -->
      <extension>
        <groupId>org.apache.maven.wagon</groupId>
        <artifactId>wagon-ssh</artifactId>
        <version>2.6</version>
      </extension>
    </extensions>

  </build>

  <reporting>
    <excludeDefaults>true</excludeDefaults>
  </reporting>

  <profiles>

    <profile>
      <id>profile-default</id>
      <activation>
        <property>
          <name>env</name>
          <value>default</value>
        </property>
      </activation>
      <properties>
        <!-- default configuration-->
      </properties>
    </profile>

    <profile>
      <id>profile-sfa</id>
      <activation>
        <property>
          <name>env</name>
          <value>sfa</value>
        </property>
      </activation>
      <properties>
        <!-- SFA properties -->
<!--        <home.dir>E:/SIH</home.dir>-->
        <home.dir>/home/sfa/sih/data</home.dir>
        <adagio-admin.version>2.6.7.5-SFA</adagio-admin.version>
        <!--<allegro-obsdeb.jre.version>1.8.162</allegro-obsdeb.jre.version> TODO update jre when Win32ShellFolder2 problem happens -->
        <allegro-obsdeb.version>1.8.27-SFA</allegro-obsdeb.version>
        <allegro-obsdeb.launcher.version>1.8.2-SFA</allegro-obsdeb.launcher.version>
        <adagio.version>4.1.25</adagio.version>
        <tomcat.host>10.9.8.31</tomcat.host>
      </properties>
    </profile>

    <profile>
      <id>profile-sfa-test</id>
      <activation>
        <property>
          <name>env</name>
          <value>sfa-test</value>
        </property>
      </activation>
      <properties>
        <!-- SFA properties -->
        <home.dir>c:\\dev\\sih-sfa</home.dir>
        <adagio-admin.version>2.6.7.5-SFA</adagio-admin.version>
        <!--<allegro-obsdeb.jre.version>1.8.162</allegro-obsdeb.jre.version> TODO update jre when Win32ShellFolder2 problem happens-->
        <allegro-obsdeb.version>1.8.27-SFA</allegro-obsdeb.version>
        <allegro-obsdeb.launcher.version>1.8.2-SFA</allegro-obsdeb.launcher.version>
        <adagio.version>4.1.25</adagio.version>
        <tomcat.host>localhost</tomcat.host>
        <tomcat.port>8081</tomcat.port>
      </properties>
    </profile>

    <profile>
      <id>profile-localhost-test</id>
      <activation>
        <property>
          <name>env</name>
          <value>test</value>
        </property>
      </activation>
      <properties>
        <!--<adagio-admin.version>2.6.7.4-SFA</adagio-admin.version>-->
        <tomcat.host>localhost</tomcat.host>
        <tomcat.port>8081</tomcat.port>
      </properties>
    </profile>

    <profile>
      <id>tomcat</id>
      <activation>
        <property>
          <name>tomcat.skip</name>
          <value>!true</value>
        </property>
      </activation>
      <dependencies>
        <dependency>
          <groupId>org.apache.tomcat</groupId>
          <artifactId>tomcat</artifactId>
          <version>${tomcat.version}</version>
          <type>zip</type>
        </dependency>
      </dependencies>

      <build>
        <defaultGoal>package</defaultGoal>
        <plugins>
          <plugin>
            <artifactId>maven-dependency-plugin</artifactId>
            <executions>
              <execution>
                <id>unpack-tomcat</id>
                <phase>prepare-package</phase>
                <goals>
                  <goal>unpack-dependencies</goal>
                </goals>
                <configuration>
                  <!--<overWriteReleases>false</overWriteReleases>-->
                  <!--<overWriteSnapshots>true</overWriteSnapshots>-->
                  <!--<overWriteIfNewer>true</overWriteIfNewer>-->
                  <outputDirectory>${project.build.directory}</outputDirectory>
                  <!--<silent>false</silent>-->
                  <includeArtifactIds>tomcat</includeArtifactIds>
                </configuration>
              </execution>

              <execution>
                <id>unpack-wars</id>
                <phase>prepare-package</phase>
                <goals>
                  <goal>unpack-dependencies</goal>
                </goals>
                <configuration>
                  <!--<overWriteReleases>true</overWriteReleases>-->
                  <!--<overWriteSnapshots>true</overWriteSnapshots>-->
                  <!--<overWriteIfNewer>true</overWriteIfNewer>-->
                  <outputDirectory>${webapps.dir}</outputDirectory>
                  <useSubDirectoryPerArtifact>true</useSubDirectoryPerArtifact>
                  <!--<silent>false</silent>-->
                  <includeArtifactIds>
                    adagio-admin,
                    adagio-synchro-server,
                    adagio-extractor-ui
                  </includeArtifactIds>
                  <excludeClassifiers>
                    standalone
                  </excludeClassifiers>
                  <!-- cas-server-webapp -->
                </configuration>
              </execution>

              <execution>
                <id>copy-libs</id>
                <phase>prepare-package</phase>
                <goals>
                  <goal>copy-dependencies</goal>
                </goals>
                <configuration>
                  <!--<overWriteReleases>true</overWriteReleases>-->
                  <!--<overWriteSnapshots>true</overWriteSnapshots>-->
                  <!--<overWriteIfNewer>true</overWriteIfNewer>-->
                  <outputDirectory>${tomcat.dir}/lib</outputDirectory>
                  <!--<silent>false</silent>-->
                  <includeArtifactIds>
                    ojdbc8,
                    hsqldb,
                    log4j
                  </includeArtifactIds>
                </configuration>
              </execution>

              <execution>
                <id>copy-obsdeb-plugins</id>
                <phase>prepare-package</phase>
                <goals>
                  <goal>copy-dependencies</goal>
                </goals>
                <configuration>
                  <outputDirectory>${project.build.directory}/obsdeb-plugins</outputDirectory>
                  <includeArtifactIds>
                    t0403_product_OBSDEB_export
                  </includeArtifactIds>
                </configuration>
              </execution>

              <execution>
                <id>copy-obsdeb-update-artifacts</id>
                <phase>prepare-package</phase>
                <goals>
                  <goal>copy-dependencies</goal>
                </goals>
                <configuration>
                  <outputDirectory>${project.build.directory}/obsdeb-artifacts</outputDirectory>
                  <includeArtifactIds>
                    obsdeb-ui-swing,obsdeb-ui-swing-launcher
                  </includeArtifactIds>
                  <includeClassifiers>standalone,i18n,help,bin</includeClassifiers>
                </configuration>
              </execution>

              <execution>
                <id>get-windows-i586-jre</id>
                <phase>prepare-package</phase>
                <goals>
                  <goal>copy-dependencies</goal>
                </goals>
                <configuration>
                  <outputDirectory>
                    ${project.build.directory}/jre
                  </outputDirectory>
                  <includeArtifactIds>jre</includeArtifactIds>
                  <includeClassifiers>windows-i586,windows-x64</includeClassifiers>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <artifactId>maven-antrun-plugin</artifactId>
            <executions>
              <execution>
                <id>repackage-tomcat</id>
                <phase>package</phase>
                <goals>
                  <goal>run</goal>
                </goals>
                <configuration>
                  <target name="configure_tomcat">
                    <taskdef resource="net/sf/antcontrib/antlib.xml">
                      <classpath refid="maven.plugin.classpath"/>
                    </taskdef>

                    <echo message="Configuring tomcat..."/>

                    <!-- Remove the default webapps -->
                    <delete dir="${webapps.dir}/docs"/>
                    <delete dir="${webapps.dir}/examples"/>
                    <!--delete dir="${webapps.dir}/manager" /-->
                    <delete dir="${webapps.dir}/host-manager"/>
                    <delete includeEmptyDirs="true">
                      <!-- keep downloads (see 'clients' profile)-->
                      <fileset dir="${site.dir}" excludes="downloads/*,updates/*"/>
                    </delete>

                    <!-- Patch the bin/catalina* scripts to include some of our jars in the classpath -->

                    <!-- Rename wars -->
                    <move file="${webapps.dir}/adagio-synchro-server-${adagio.version}-war" tofile="${webapps.dir}/adagio-synchro-server" failonerror="false"/>
                    <move file="${webapps.dir}/adagio-admin-${adagio-admin.version}-war" tofile="${webapps.dir}/adagio-admin" failonerror="false"/>
                    <move file="${webapps.dir}/adagio-extractor-ui-${adagio-extractor.version}-war" tofile="${webapps.dir}/adagio-extractor" failonerror="false"/>
                    <!--<move file="${webapps.dir}/cas-server-webapp-${cas.version}-ldap-war" tofile="${webapps.dir}/cas" failonerror="false"/>-->

                    <!-- Patch adagio-admin -->
                    <if>
                      <equals arg1="${adagio-admin.version}" arg2="2.5.8"/>
                      <!-- Patch this version : replace LDAPServiceImpl class and add ldap-1.2 library -->
                      <then>
                        <move file="${webapps.dir}/adagio-admin/WEB-INF/classes/fr/ifremer/adagio/administration/service/impl/LDAPServiceImpl.class"
                              tofile="${webapps.dir}/adagio-admin/WEB-INF/classes/fr/ifremer/adagio/administration/service/impl/LDAPServiceImpl.class_old" failonerror="false"/>
                        <delete file="${webapps.dir}/adagio-admin/WEB-INF/lib/ldap-1.1.jar"/>
                        <copy todir="${webapps.dir}/adagio-admin">
                          <fileset dir="src/main/patch/adagio-admin"/>
                        </copy>
                      </then>
                    </if>
                    <!-- Remove ojdbc lib-->
                    <delete>
                      <fileset dir="${webapps.dir}/adagio-admin/WEB-INF/lib" includes="ojdbc*.jar"/>
                    </delete>
                    <!-- Configure adagio-admin -->
                    <filterset id="adagio-admin-filterset">
                      <filter value="${database.jdbc.url}" token="jdbcUrl"/>
                      <filter value="${database.jdbc.username}" token="jdbcUsername"/>
                      <filter value="${database.jdbc.password}" token="jdbcPassword"/>
                      <filter value="${database.jdbc.cryptPassword}" token="jdbcCryptPassword"/>
                    </filterset>
                    <!-- default conf -->
                    <copy todir="${webapps.dir}/adagio-admin" overwrite="true">
                      <filterset refid="adagio-admin-filterset"/>
                      <fileset dir="src/main/conf/adagio-admin"/>
                    </copy>
                    <!-- env conf -->
                    <copy todir="${webapps.dir}/adagio-admin" failonerror="false" overwrite="true">
                      <filterset refid="adagio-admin-filterset"/>
                      <fileset dir="src/main/env/${env}/adagio-admin"/>
                    </copy>

                    <delete dir="${webapps.dir}/adagio-admin-${adagio-admin.version}-war"/>
                    <replaceregexp match="hibernate.show_sql&quot;&gt;true&lt;" replace="hibernate.show_sql&quot;&gt;false&lt;" flags="g" byline="true">
                      <fileset dir="${webapps.dir}/adagio-admin/WEB-INF/classes" includes="**/xeDB.spring.xml"/>
                    </replaceregexp>

                    <!-- Configure adagio synchro server -->
                    <filterset id="adagio-synchro-server-filterset">
                      <filter value="${home.dir}" token="homeDir"/>
                      <filter value="${database.jdbc.url}" token="jdbcUrl"/>
                      <filter value="${database.jdbc.username}" token="jdbcUsername"/>
                      <filter value="${database.jdbc.password}" token="jdbcPassword"/>
                      <filter value="${tomcat.url}" token="serverUrl"/>
                    </filterset>
                    <!-- default conf -->
                    <copy todir="${webapps.dir}/adagio-synchro-server">
                      <filterset refid="adagio-synchro-server-filterset"/>
                      <fileset dir="src/main/conf/adagio-synchro-server"/>
                    </copy>
                    <!-- env conf -->
                    <copy todir="${webapps.dir}/adagio-synchro-server" failonerror="false" overwrite="true">
                      <filterset refid="adagio-synchro-server-filterset"/>
                      <fileset dir="src/main/env/${env}/adagio-synchro-server"/>
                    </copy>
                    <!-- add Log4j dep -->
                    <dependencyfilesets/>
                    <copy todir="${webapps.dir}/adagio-synchro-server/WEB-INF/lib">
                      <fileset refid="log4j:log4j:jar"/>
                    </copy>

                    <!-- Configure extractor -->
                    <filterset id="adagio-extractor-filterset">
                      <filter value="${home.dir}" token="homeDir"/>
                      <filter value="${extractor.database.jdbc.url}" token="jdbcUrl"/>
                      <filter value="${extractor.database.jdbc.username}" token="jdbcUsername"/>
                      <filter value="${extractor.database.jdbc.password}" token="jdbcPassword"/>
                      <filter value="${database.jdbc.username}" token="jdbcSourceSchema"/>
                      <filter value="${tomcat.url}" token="serverUrl"/>
                      <filter value="${mail.smtp.host}" token="smtpHost"/>
                      <filter value="${mail.smtp.port}" token="smtpPort"/>
                      <filter value="${mail.smtp.username}" token="smtpUsername"/>
                      <filter value="${mail.smtp.password}" token="smtpPassword"/>
                    </filterset>
                    <!-- default conf-->
                    <copy todir="${webapps.dir}/adagio-extractor">
                      <filterset refid="adagio-extractor-filterset"/>
                      <fileset dir="src/main/conf/adagio-extractor"/>
                    </copy>
                    <!-- env conf -->
                    <copy todir="${webapps.dir}/adagio-extractor" failonerror="false" overwrite="true">
                      <filterset refid="adagio-extractor-filterset"/>
                      <fileset dir="src/main/env/${env}/adagio-extractor"/>
                    </copy>

                    <!-- Patch CAS server
                    <copy todir="${webapps.dir}/cas">
                        <fileset dir="src/main/conf/cas"/>
                    </copy>-->

                    <!-- Configure tomcat -->
                    <filterset id="tomcat-filterset">
                      <filter value="${tomcat.port}" token="serverPort"/>
                      <filter value="${ldap.manager.username}" token="ldapUsername"/>
                      <filter value="${ldap.manager.password}" token="ldapPassword"/>
                    </filterset>
                    <!-- default conf -->
                    <copy todir="${tomcat.dir}/">
                      <filterset refid="tomcat-filterset"/>
                      <fileset dir="src/main/conf/tomcat"/>
                    </copy>
                    <!-- env conf -->
                    <copy todir="${tomcat.dir}/" failonerror="false" overwrite="true">
                      <filterset refid="tomcat-filterset"/>
                      <fileset dir="src/main/env/${env}/tomcat"/>
                    </copy>

                    <!-- Copy site into ROOT -->
                    <copy todir="${site.dir}">
                      <fileset dir="src/main/site/${env}"/>
                    </copy>


                    <!-- touche (usefull if tomcat is started -->
                    <touch file="${webapps.dir}/adagio-admin/WEB-INF/web.xml"/>
                    <!--<touch file="${webapps.dir}/cas/WEB-INF/web.xml"/>-->
                    <touch file="${webapps.dir}/adagio-synchro-server/WEB-INF/web.xml"/>
                    <touch file="${webapps.dir}/adagio-extractor/WEB-INF/web.xml"/>

                  </target>
                </configuration>
              </execution>

              <!-- Prepare ObsDeb update site -->
              <execution>
                <id>package-update-site-and-db</id>
                <phase>package</phase>
                <goals>
                  <goal>run</goal>
                </goals>

                <configuration>
                  <target>
                    <echo message="Packaging update site and HsqlDb..."/>
                    <property name="updates.dir" value="${site.dir}/updates/allegro-obsdeb"/>
                    <property name="db.file" value="src/main/env/${env}/allegro-obsdeb-db/db.zip"/>

                    <!-- Remove previous dir -->
                    <delete dir="${updates.dir}" includeEmptyDirs="true" failonerror="false"/>
                    <delete dir="${project.build.directory}/allegro-db"/>

                    <!-- Get config and DB version-->
                    <tstamp>
                      <format property="config.version" pattern="yyyy.MM.dd" locale="fr,FR"/>
                    </tstamp>
                    <unzip
                        src="${db.file}"
                        dest="${project.build.directory}/allegro-db"
                        overwrite="true"/>
                    <fail message="Malformed db.zip: missing directory 'db' or file 'db/version.appup'"> <!-- Check db.zip structure -->
                      <condition>
                        <or>
                          <not>
                            <available file="${project.build.directory}/allegro-db/db" type="dir"/>
                          </not>
                          <not>
                            <available file="${project.build.directory}/allegro-db/db/version.appup" type="file"/>
                          </not>
                        </or>
                      </condition>
                    </fail>
                    <loadfile property="db.version" srcFile="${project.build.directory}/allegro-db/db/version.appup"/>

                    <!-- Copy jre, update artifacts and plugins -->
                    <move toDir="${updates.dir}">
                      <fileset dir="${project.build.directory}/jre" />
                      <fileset dir="${project.build.directory}/obsdeb-artifacts" excludes="*.exe" />
                      <fileset dir="${project.build.directory}/obsdeb-plugins" />
                    </move>
                    <delete dir="${project.build.directory}/jre"/>
                    <delete dir="${project.build.directory}/obsdeb-artifacts"/>
                    <delete dir="${project.build.directory}/obsdeb-plugins"/>

                    <!-- Configure obsdeb-application & obsdeb-data files -->
                    <copy todir="${updates.dir}"
                          filtering="true">
                      <filterset>
                        <filter value="${db.version}" token="dbVersion"/>
                        <filter value="${allegro-obsdeb.jre.version}" token="jreVersion"/>
                        <filter value="${tomcat.url}/updates/allegro-obsdeb/jre-${allegro-obsdeb.jre.version}-windows-i586.zip" token="jreWindowsi586Url"/>
                        <filter value="${tomcat.url}/updates/allegro-obsdeb/jre-${allegro-obsdeb.jre.version}-windows-x64.zip" token="jreWindowsx64Url"/>
                        <filter value="${tomcat.url}/updates/allegro-obsdeb/obsdeb-db-${db.version}.zip" token="dbUrl"/>
                        <filter value="${tomcat.url}/updates/allegro-obsdeb/obsdeb-config.zip" token="configUrl"/>
                        <filter value="${config.version}" token="configVersion"/>
                        <filter value="${tomcat.url}/updates/allegro-obsdeb/t0403_product_OBSDEB_export-${allegro-obsdeb.export-plugin.version}.zip" token="exportPluginUrl"/>
                        <filter value="${allegro-obsdeb.export-plugin.version}" token="exportPluginVersion"/>
                        <!--<filter value="${allegro-obsdeb.distributionUrl}" token="distributionUrl"/>-->
                        <filter value="${tomcat.url}/updates/allegro-obsdeb/obsdeb-ui-swing-${allegro-obsdeb.version}-standalone.zip" token="obsdebStandaloneUrl"/>
                        <filter value="${tomcat.url}/updates/allegro-obsdeb/obsdeb-ui-swing-${allegro-obsdeb.version}-i18n.zip" token="obsdebI18nUrl"/>
                        <filter value="${tomcat.url}/updates/allegro-obsdeb/obsdeb-ui-swing-${allegro-obsdeb.version}-help.zip" token="obsdebHelpUrl"/>
                        <filter value="${allegro-obsdeb.version}" token="projectVersion"/>
                        <filter value="$${tomcat.url}/updates/allegro-obsdeb/obsdeb-ui-swing-launcher-${allegro-obsdeb.launcher.version}-bin.zip" token="launcherUrl"/>
                        <filter value="${allegro-obsdeb.launcher.version}" token="launcherVersion"/>
                      </filterset>
                      <fileset dir="src/main/conf/allegro-obsdeb-update-site" includes="*.properties"/>
                    </copy>
                    <copy file="${db.file}"
                          tofile="${updates.dir}/obsdeb-db-${db.version}.zip"/>

                    <!-- Create config ZIP file -->
                    <copy todir="${updates.dir}/obsdeb-config/config">
                      <filterset>
                        <filter value="${database.jdbc.url}" token="jdbcUrl"/>
                        <filter value="${database.jdbc.username}" token="jdbcUsername"/>
                        <filter value="${database.jdbc.password}" token="jdbcPassword"/>
                        <filter value="${tomcat.url}" token="serverUrl"/>
                      </filterset>
                      <fileset dir="src/main/env/${env}/allegro-obsdeb/config"/>
                    </copy>
                    <echo file="${updates.dir}/obsdeb-config/config/version.appup" append="false">${config.version}</echo>
                    <zip destfile="${updates.dir}/obsdeb-config.zip" update="false">
                      <zipfileset dir="${updates.dir}/obsdeb-config"/>
                    </zip>
                    <delete dir="${updates.dir}/obsdeb-config"/>
                  </target>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>jboss</id>
      <activation>
        <property>
          <name>jboss.skip</name>
          <value>!true</value>
        </property>
      </activation>
      <dependencies>
        <dependency>
          <groupId>org.jboss.as</groupId>
          <artifactId>jboss</artifactId>
          <version>${jboss.version}</version>
          <type>zip</type>
        </dependency>
      </dependencies>
      <build>
        <defaultGoal>package</defaultGoal>
        <plugins>
          <plugin>
            <artifactId>maven-dependency-plugin</artifactId>
            <executions>
              <execution>
                <id>unpack-jboss</id>
                <phase>prepare-package</phase>
                <goals>
                  <goal>unpack-dependencies</goal>
                </goals>
                <configuration>
                  <outputDirectory>${project.build.directory}</outputDirectory>
                  <includeArtifactIds>jboss</includeArtifactIds>
                </configuration>
              </execution>

              <execution>
                <id>copy-jboss-ears</id>
                <phase>prepare-package</phase>
                <goals>
                  <goal>copy-dependencies</goal>
                </goals>
                <configuration>
                  <outputDirectory>${project.build.directory}/jboss-${jboss.version}/server/default/deploy</outputDirectory>
                  <includeArtifactIds>
                    allegro-remote-q2,
                    allegro-remote
                  </includeArtifactIds>
                </configuration>
              </execution>

              <execution>
                <id>copy-jboss-libs</id>
                <phase>prepare-package</phase>
                <goals>
                  <goal>copy-dependencies</goal>
                </goals>
                <configuration>
                  <outputDirectory>${project.build.directory}/jboss-${jboss.version}/server/default/lib</outputDirectory>
                  <silent>true</silent>
                  <includeArtifactIds>
                    ojdbc8
                  </includeArtifactIds>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <artifactId>maven-antrun-plugin</artifactId>
            <executions>
              <execution>
                <id>repackage-jboss</id>
                <phase>package</phase>
                <goals>
                  <goal>run</goal>
                </goals>

                <configuration>
                  <target>
                    <echo message="Re-packaging jboss..."/>

                    <!-- Set EAR classloader isolation  -->
                    <copy todir="${jboss.dir}/">
                      <fileset dir="src/main/conf/jboss"/>
                    </copy>

                    <!-- Remove unused ear - TODO ?
                    <delete dir="${jboss.deploy.dir}/xxx" /> -->

                    <!-- Patch the bin/catalina* scripts to include some of our jars in the classpath -->

                    <!-- Rename ears -->
                    <move file="${jboss.deploy.dir}/allegro-remote-q2-${allegro-q2.version}.ear" tofile="${jboss.deploy.dir}/allegro-remote-q2.ear" failonerror="false"/>
                    <move file="${jboss.deploy.dir}/allegro-remote-q2-${allegro-q2.version}-activeDirectory.ear" tofile="${jboss.deploy.dir}/allegro-remote-q2.ear" failonerror="false"/>
                    <move file="${jboss.deploy.dir}/allegro-remote-${allegro.version}.ear" tofile="${jboss.deploy.dir}/allegro-remote.ear" failonerror="false"/>
                    <move file="${jboss.deploy.dir}/allegro-remote-${allegro.version}-noldap.ear" tofile="${jboss.deploy.dir}/allegro-remote.ear" failonerror="false"/>
                  </target>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>clients</id>
      <activation>
        <property>
          <name>clients.skip</name>
          <value>!true</value>
        </property>
      </activation>
      <build>
        <defaultGoal>package</defaultGoal>
        <plugins>
          <plugin>
            <artifactId>maven-dependency-plugin</artifactId>
            <executions>
              <execution>
                <id>unpack-clients</id>
                <phase>prepare-package</phase>
                <goals>
                  <goal>unpack-dependencies</goal>
                </goals>
                <configuration>
                  <outputDirectory>${project.build.directory}/clients</outputDirectory>
                  <useSubDirectoryPerArtifact>true</useSubDirectoryPerArtifact>
                  <includeArtifactIds>
                    obsdeb-ui-swing,
                    adagio-extractor-ui,
                    allegro-q2,
                    allegro,
                    t0403_product_OBSDEB_export
                  </includeArtifactIds>
                  <excludeTypes>
                    war
                  </excludeTypes>
                  <excludeClassifiers>
                    help,i18n,standalone
                  </excludeClassifiers>
                </configuration>
              </execution>
              <execution>
                <id>unpack-adagio-core</id>
                <phase>prepare-package</phase>
                <goals>
                  <goal>unpack-dependencies</goal>
                </goals>
                <configuration>
                  <outputDirectory>${project.build.directory}/clients</outputDirectory>
                  <useSubDirectoryPerArtifact>true</useSubDirectoryPerArtifact>
                  <includeArtifactIds>
                    adagio-core
                  </includeArtifactIds>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <artifactId>maven-antrun-plugin</artifactId>
            <executions>
              <execution>
                <id>configure-clients</id>
                <phase>package</phase>
                <goals>
                  <goal>run</goal>
                </goals>

                <configuration>
                  <target>
                    <taskdef resource="net/sf/antcontrib/antlib.xml">
                      <classpath refid="maven.plugin.classpath"/>
                    </taskdef>

                    <!-- ObsDeb -->
                    <echo message="Configuring ObsDeb..."/>
                    <property name="obsdeb.dir" location="${clients.dir}/allegro-obsdeb"/>
                    <move file="${clients.dir}/obsdeb-ui-swing-${allegro-obsdeb.version}-${allegro-obsdeb.classifier}-zip/allegro-obsdeb-${allegro-obsdeb.version}"
                          tofile="${obsdeb.dir}" failonerror="false"/>
                    <delete dir="${clients.dir}/obsdeb-ui-swing-${allegro-obsdeb.version}-${allegro-obsdeb.classifier}-zip" includeEmptyDirs="true" failonerror="false"/>
                    <copy todir="${obsdeb.dir}" overwrite="true">
                      <filterset>
                        <filter value="${database.jdbc.url}" token="jdbcUrl"/>
                        <filter value="${database.jdbc.username}" token="jdbcUsername"/>
                        <filter value="${database.jdbc.password}" token="jdbcPassword"/>
                        <filter value="${tomcat.url}" token="serverUrl"/>
                      </filterset>
                      <fileset dir="src/main/env/${env}/allegro-obsdeb"/>
                    </copy>
                    <move file="${clients.dir}/t0403_product_OBSDEB_export-${allegro-obsdeb.export-plugin.version}-zip/t0403_product_OBSDEB_export"
                          tofile="${obsdeb.dir}/plugins/t0403_product_OBSDEB_export" failonerror="false"/>
                    <delete dir="${clients.dir}/t0403_product_OBSDEB_export-${allegro-obsdeb.export-plugin.version}-zip" includeEmptyDirs="true" failonerror="false"/>
                    <echo file="${obsdeb.dir}/plugins/t0403_product_OBSDEB_export/version.appup" append="false">${allegro-obsdeb.export-plugin.version}</echo>
                    <delete dir="${obsdeb.dir}/data"/>
                    <!-- uncomment if synchro server doesn't handle installation database -->
                    <!--<unzip src="src/main/env/${env}/allegro-obsdeb-db/db.zip"-->
                           <!--dest="${obsdeb.dir}/data"-->
                           <!--overwrite="true"/>-->
                    <zip destfile="${site.dir}/downloads/allegro-obsdeb.zip" update="false">
                      <zipfileset dir="${obsdeb.dir}" includes="**/*"/>
                    </zip>

                    <!-- Allegro-q2 -->
                    <echo message="Configuring Allegro-q2..."/>
                    <property name="allegro-q2.dir" location="${clients.dir}/allegro-q2"/>
                    <move file="${allegro-q2.dir}-${allegro-q2.version}-zip" tofile="${allegro-q2.dir}" failonerror="false"/>

                    <!-- Patch the fr.ifremer.quadrige2.common plugin (change properties to access the server) -->
                    <loadproperties srcFile="src/main/conf/allegro-q2/plugins/fr.ifremer.quadrige2.common/serverconfig.properties">
                      <filterchain>
                        <replacetokens>
                          <token key="serverUrl" value="${tomcat.url}"/>
                        </replacetokens>
                      </filterchain>
                    </loadproperties>
                    <fail unless="intranetServerURL"/>
                    <fail unless="extranetServerURL"/>
                    <fail unless="editingContextServerURL"/>
                    <for param="file">
                      <path>
                        <fileset dir="${allegro-q2.dir}/plugins" includes="fr.ifremer.quadrige2.common_*.jar"/>
                      </path>
                      <sequential>
                        <property name="plugin_common.dir" value="@{file}"/>
                        <propertyregex
                            input="${plugin_common.dir}"
                            regexp="(.*)[.]jar"
                            select="\1"
                            property="plugin_common.dir"
                            override="true"/>
                      </sequential>
                    </for>
                    <if>
                      <available file="${plugin_common.dir}.jar"/>
                      <then>
                        <mkdir dir="${plugin_common.dir}"/>
                        <unzip
                            src="${plugin_common.dir}.jar"
                            dest="${plugin_common.dir}"
                            overwrite="true"/>
                      </then>
                      <else>
                        <for param="file">
                          <path>
                            <dirset dir="${allegro-q2.dir}/plugins" includes="fr.ifremer.quadrige2.common_*"/>
                          </path>
                          <sequential>
                            <property name="plugin_common.dir" value="@{file}"/>
                            <propertyregex
                                input="${plugin_common.dir}"
                                regexp="(.*)[.]jar"
                                select="\1"
                                property="plugin_common.dir"
                                override="true"/>
                          </sequential>
                        </for>
                      </else>
                    </if>
                    <propertyfile
                        file="${plugin_common.dir}\fr\ifremer\quadrige2\common\servermanager\serverconfig.properties">
                      <entry key="intranetServerURL" value="${intranetServerURL}"/>
                      <entry key="extranetServerURL" value="${extranetServerURL}"/>
                      <entry key="editingContextServerURL" value="${editingContextServerURL}"/>
                    </propertyfile>
                    <delete file="${plugin_common.dir}.jar"/>
                    <zip destfile="${plugin_common.dir}.jar" update="false">
                      <zipfileset dir="${plugin_common.dir}"/>
                    </zip>
                    <delete dir="${plugin_common.dir}"/>
                    <zip destfile="${site.dir}/downloads/allegro-q2.zip" update="false">
                      <zipfileset dir="${allegro-q2.dir}" includes="**/*"/>
                    </zip>

                    <!-- Allegro -->
                    <echo message="Configuring Allegro..."/>
                    <property name="allegro.dir" location="${clients.dir}/allegro"/>
                    <move file="${allegro.dir}-${allegro.version}-zip" tofile="${allegro.dir}" failonerror="false"/>
                    <for param="file">
                      <path>
                        <dirset dir="${allegro.dir}/plugins" includes="fr.ifremer.allegro.configuration_*"/>
                      </path>
                      <sequential>
                        <property name="plugin_config.dir" value="@{file}"/>
                        <propertyregex
                            input="${plugin_config.dir}"
                            regexp="(.*)[.]jar"
                            select="\1"
                            property="plugin_config.dir"
                            override="true"/>
                      </sequential>
                    </for>
                    <!-- default conf -->
                    <copy todir="${plugin_config.dir}/">
                      <filterset>
                        <filter value="${tomcat.url}" token="serverUrl"/>
                      </filterset>
                      <fileset dir="src/main/conf/allegro/plugins/fr.ifremer.allegro.configuration"/>
                    </copy>
                    <!-- env conf -->
                    <copy todir="${plugin_config.dir}/" failonerror="false" overwrite="true">
                      <fileset dir="src/main/env/${env}/allegro/plugins/fr.ifremer.allegro.configuration"/>
                    </copy>
                    <zip destfile="${site.dir}/downloads/allegro.zip" update="false">
                      <zipfileset dir="${allegro.dir}" includes="**/*"/>
                    </zip>

                    <!-- Adagio extractor Batch -->
                    <echo message="Configuring Adagio-extractor Batch..."/>
                    <property name="adagio-extractor-batch.dir" value="${project.build.directory}/adagio-extractor-batch"/>
                    <move file="${clients.dir}/adagio-extractor-ui-${adagio-extractor.version}-standalone-zip/adagio-extractor-${adagio-extractor.version}"
                          tofile="${adagio-extractor-batch.dir}" failonerror="false"/>
                    <delete dir="${clients.dir}/adagio-extractor-ui-${adagio-extractor.version}-standalone-zip" failonerror="false"/>
                    <copy todir="${adagio-extractor-batch.dir}">
                      <filterset>
                        <filter value="${home.dir}" token="homeDir"/>
                        <filter value="${extractor.database.jdbc.url}" token="jdbcUrl"/>
                        <filter value="${extractor.database.jdbc.username}" token="jdbcUsername"/>
                        <filter value="${extractor.database.jdbc.password}" token="jdbcPassword"/>
                        <filter value="${database.jdbc.username}" token="jdbcSourceSchema"/>
                        <filter value="${tomcat.url}" token="serverUrl"/>
                      </filterset>
                      <fileset dir="src/main/env/${env}/adagio-extractor-batch"/>
                    </copy>

                    <!-- Adagio Core -->
                    <echo message="Configuring Adagio Core..."/>
                    <property name="adagio.core.dir" location="${clients.dir}/adagio-core"/>
                    <move file="${clients.dir}/adagio-core-${adagio.version}-standalone-zip/adagio-core-${adagio.version}"
                          tofile="${adagio.core.dir}" failonerror="false"/>
                    <delete dir="${clients.dir}/adagio-core-${adagio.version}-standalone-zip" includeEmptyDirs="true" failonerror="false"/>
                    <copy todir="${adagio.core.dir}">
                      <filterset>
                        <filter value="${database.jdbc.url}" token="jdbcUrl"/>
                        <filter value="${database.jdbc.username}" token="jdbcUsername"/>
                        <filter value="${database.jdbc.password}" token="jdbcPassword"/>
                      </filterset>
                      <fileset dir="src/main/conf/adagio-core"/>
                    </copy>
                    <!-- Patch Adagio-Core script -->
                    <if>
                      <or>
                        <equals arg1="${adagio.version}" arg2="4.0.4"/>
                        <equals arg1="${adagio.version}" arg2="4.0.5"/>
                        <equals arg1="${adagio.version}" arg2="4.0.6"/>
                        <equals arg1="${adagio.version}" arg2="4.0.7"/>
                      </or>
                      <then>
                        <replace file="${adagio.core.dir}/adagio-core-server.bat"
                          token="-jar"
                          value="&quot;-Dadagio-core-server.config=.\conf\adagio-core-server.config&quot; -jar"/>
                        <replace file="${adagio.core.dir}/adagio-core-server.sh"
                          token="-jar"
                          value="-Dadagio-core-server.config=./conf/adagio-core-server.config -jar"/>
                      </then>
                    </if>
                  </target>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

  </profiles>
</project>
